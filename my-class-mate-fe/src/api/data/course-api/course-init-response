import { logger } from '@/lib/default-logger';

// Course Request Interfaces
export interface InitCourseRequest {
  dayOfWeek: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY';
  startDate: string; // Format: "YYYY-MM-DD"
  endDate: string;   // Format: "YYYY-MM-DD"
  startTime: string; // Format: "HH:mm:ss"
  endTime: string;   // Format: "HH:mm:ss"
  room: string;
}

// Course Response Interfaces
export interface CourseResponse {
  success: boolean;
  message?: string;
  data?: CourseData;
}

export interface CourseData {
  courseId: string;
  dayOfWeek: string;
  startDate: string;
  endDate: string;
  startTime: string;
  endTime: string;
  room: string;
  status: 'ACTIVE' | 'INACTIVE' | 'COMPLETED';
  createdAt: string;
  updatedAt: string;
}

export interface CourseListResponse {
  success: boolean;
  message?: string;
  data?: CourseData[];
  total?: number;
}

// API Configuration
const BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8080';
const API_VERSION = 'my-class-mate/v1';

/**
 * Initialize a new course
 */
export async function initCourse(courseData: InitCourseRequest): Promise<CourseResponse> {
  try {
    logger.debug('[CourseAPI]: Initializing course with data:', courseData);

    const url = `${BASE_URL}/${API_VERSION}/courses/init`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'x-role': 'ADMIN', // Required header as per curl command
        // Add authorization if needed
        ...(typeof window !== 'undefined' && localStorage.getItem('access-token') && {
          'Authorization': `Bearer ${localStorage.getItem('access-token')}`
        })
      },
      body: JSON.stringify(courseData)
    });

    logger.debug(`[CourseAPI]: Response status: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      logger.error(`[CourseAPI]: HTTP error ${response.status}: ${errorText}`);
      
      return {
        success: false,
        message: `เกิดข้อผิดพลาดในการสร้างรายวิชา (${response.status})`
      };
    }

    const data = await response.json();
    logger.debug('[CourseAPI]: Course initialized successfully');

    return {
      success: true,
      message: 'สร้างรายวิชาสำเร็จ',
      data: data
    };

  } catch (error) {
    logger.error('[CourseAPI]: Network error initializing course:', error);
    
    return {
      success: false,
      message: 'ไม่สามารถเชื่อมต่อกับเซิร์ฟเวอร์ได้ กรุณาตรวจสอบการเชื่อมต่ออินเทอร์เน็ต'
    };
  }
}

/**
 * Get all courses
 */
export async function getCourses(): Promise<CourseListResponse> {
  try {
    logger.debug('[CourseAPI]: Fetching all courses');

    const url = `${BASE_URL}/${API_VERSION}/courses`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'x-role': localStorage.getItem('user-role') || 'STUDENT',
        ...(typeof window !== 'undefined' && localStorage.getItem('access-token') && {
          'Authorization': `Bearer ${localStorage.getItem('access-token')}`
        })
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error(`[CourseAPI]: HTTP error ${response.status}: ${errorText}`);
      
      return {
        success: false,
        message: `เกิดข้อผิดพลาดในการดึงข้อมูลรายวิชา (${response.status})`
      };
    }

    const data = await response.json();
    logger.debug('[CourseAPI]: Courses fetched successfully');

    return {
      success: true,
      data: data.courses || data,
      total: data.total || (data.courses ? data.courses.length : 0)
    };

  } catch (error) {
    logger.error('[CourseAPI]: Network error fetching courses:', error);
    
    return {
      success: false,
      message: 'ไม่สามารถดึงข้อมูลรายวิชาได้'
    };
  }
}

/**
 * Get course by ID
 */
export async function getCourseById(courseId: string): Promise<CourseResponse> {
  try {
    logger.debug(`[CourseAPI]: Fetching course with ID: ${courseId}`);

    const url = `${BASE_URL}/${API_VERSION}/courses/${courseId}`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'x-role': localStorage.getItem('user-role') || 'STUDENT',
        ...(typeof window !== 'undefined' && localStorage.getItem('access-token') && {
          'Authorization': `Bearer ${localStorage.getItem('access-token')}`
        })
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error(`[CourseAPI]: HTTP error ${response.status}: ${errorText}`);
      
      return {
        success: false,
        message: `เกิดข้อผิดพลาดในการดึงข้อมูลรายวิชา (${response.status})`
      };
    }

    const data = await response.json();
    logger.debug('[CourseAPI]: Course fetched successfully');

    return {
      success: true,
      data: data
    };

  } catch (error) {
    logger.error('[CourseAPI]: Network error fetching course:', error);
    
    return {
      success: false,
      message: 'ไม่สามารถดึงข้อมูลรายวิชาได้'
    };
  }
}

/**
 * Update course
 */
export async function updateCourse(
  courseId: string,
  updateData: Partial<InitCourseRequest>
): Promise<CourseResponse> {
  try {
    logger.debug(`[CourseAPI]: Updating course ${courseId} with data:`, updateData);

    const url = `${BASE_URL}/${API_VERSION}/courses/${courseId}`;
    
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'x-role': 'ADMIN',
        ...(typeof window !== 'undefined' && localStorage.getItem('access-token') && {
          'Authorization': `Bearer ${localStorage.getItem('access-token')}`
        })
      },
      body: JSON.stringify(updateData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error(`[CourseAPI]: Update HTTP error ${response.status}: ${errorText}`);
      
      return {
        success: false,
        message: `เกิดข้อผิดพลาดในการอัปเดตรายวิชา (${response.status})`
      };
    }

    const data = await response.json();
    logger.debug('[CourseAPI]: Course updated successfully');

    return {
      success: true,
      message: 'อัปเดตรายวิชาสำเร็จ',
      data: data
    };

  } catch (error) {
    logger.error('[CourseAPI]: Network error updating course:', error);
    
    return {
      success: false,
      message: 'ไม่สามารถอัปเดตรายวิชาได้'
    };
  }
}

/**
 * Delete course
 */
export async function deleteCourse(courseId: string): Promise<{ success: boolean; message: string }> {
  try {
    logger.debug(`[CourseAPI]: Deleting course with ID: ${courseId}`);

    const url = `${BASE_URL}/${API_VERSION}/courses/${courseId}`;
    
    const response = await fetch(url, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'x-role': 'ADMIN',
        ...(typeof window !== 'undefined' && localStorage.getItem('access-token') && {
          'Authorization': `Bearer ${localStorage.getItem('access-token')}`
        })
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error(`[CourseAPI]: Delete HTTP error ${response.status}: ${errorText}`);
      
      return {
        success: false,
        message: `เกิดข้อผิดพลาดในการลบรายวิชา (${response.status})`
      };
    }

    logger.debug('[CourseAPI]: Course deleted successfully');

    return {
      success: true,
      message: 'ลบรายวิชาสำเร็จ'
    };

  } catch (error) {
    logger.error('[CourseAPI]: Network error deleting course:', error);
    
    return {
      success: false,
      message: 'ไม่สามารถลบรายวิชาได้'
    };
  }
}

// Export types
export type {
  InitCourseRequest,
  CourseResponse,
  CourseData,
  CourseListResponse
};